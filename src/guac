#!/bin/python3.8

#
import argparse
import yaml
import subprocess
import os
import shutil
import json
from colorama import Fore,Style

from ParseYaml import *
from Util import *
from Logger import Logger

from GuacConfig import *        
from GuacInternal import *
from GuacServer import *

###
# Executable interface

def parse_arguments():
    def add_recipe(_parser,required=True):
        _parser.add_argument("--recipe",metavar="recipe_file",required=required,help="recipe file specifies which tests to run")

    def add_name(_parser,required=True):
        _parser.add_argument("--name",metavar="name",required=required,help="name of student (stdID)")

    def add_file(_parser,required=True):
        _parser.add_argument("--file",required=required,help="file name")

    def add_these(_parser,required=True):
        _parser.add_argument("--these",metavar="students_file",required=required,help="file containing list of students")

    def add_verbose(_parser):
        _parser.add_argument("-v", "--verbose", choices=[0, 1, 2], type=int, default=0, help="Verbosity level (0, 1, or 2)")

    def add_force(_parser):
        _parser.add_argument("-f", "--force",action="store_true",help="force confirm all actions")
        
    parser = argparse.ArgumentParser(description='Grading wrapper for Avocado Framework.')
    subparsers = parser.add_subparsers(dest="command", help="Available commands")

    # run
    run_parser=subparsers.add_parser("run",help="run grading scripts using recipe")
    run_parser.set_defaults(func=run)
    run_parser.set_defaults(parser=run_parser)
    run_group=run_parser.add_mutually_exclusive_group(required=True)
    add_name(run_group,required=False)
    add_these(run_group,required=False)
    add_recipe(run_parser)
    add_verbose(run_parser)
    
    # list
    list_parser=subparsers.add_parser("list",help="list tests executed by recipe")
    list_parser.set_defaults(func=list_tests)
    add_recipe(list_parser,required=True)
    
    # generate
    generate_parser=subparsers.add_parser("generate",help="generate results for recipe using master")
    generate_parser.set_defaults(func=generate)
    add_recipe(generate_parser)
    
    # init
    init_parser=subparsers.add_parser("init",help="initializes new assignment directory, e.g. writes guac.yaml")
    init_parser.set_defaults(func=init)
    add_force(init_parser)

    # grade
    grade_parser=subparsers.add_parser("grade",help="extracts grades from results of run")
    grade_parser.set_defaults(func=grade)
    add_name(grade_parser)
    add_recipe(grade_parser)
    add_verbose(grade_parser)
    
    # inspect
    inspect_parser=subparsers.add_parser("inspect",help="inspects file from student's submission")
    inspect_parser.set_defaults(func=inspect)
    add_name(inspect_parser)
    add_file(inspect_parser,required=False)
    
    # extract
    extract_parser=subparsers.add_parser("extract",help="extracts file from these students and collects in dest directory (default ./bin)")
    extract_parser.set_defaults(func=extract)
    add_file(extract_parser)
    add_these(extract_parser)
    add_force(extract_parser)
    extract_parser.add_argument("--dest",metavar="destination_dir",required=False,help="name of directory to extract files")
    
    # update
    update_parser=subparsers.add_parser("update",help="updates student's score for specific recipe and task")
    update_parser.set_defaults(func=update)
    add_name(update_parser)
    add_recipe(update_parser)
    add_force(update_parser)
    update_parser.add_argument("--task",metavar="task_name",required=True,help="task name")
    update_parser.add_argument("--score",metavar="score",type=int,required=True,help="new score")
    
    # export
    export_parser=subparsers.add_parser("export",help="exports grades in CSV format")
    export_parser.set_defaults(func=export)
    add_recipe(export_parser)
    add_these(export_parser,required=False)

    # server
    server_parser=subparsers.add_parser("server",help="launches test server")
    server_parser.set_defaults(func=server)
    add_recipe(server_parser)
    
    return parser,parser.parse_args()

# --name | --these
# --recipe
# --verbose {0,1,2}
def run(args):

    recipe_file=args.recipe
    guac_config=GuacConfig()
    weights_file,to_execute=parse_recipe_yaml(recipe_file)
    weights=read_yaml_file(weights_file)
    
    to_run=[]
    if args.name:
        print(f"Name: {args.name}")
        to_run=[args.name]
         
    if args.these:
        print(f"YAML file: {args.these}")
        to_run=parse_students_yaml(args.these)
     
    #print(f"grading: {to_run}")
    for student in to_run:
        run_student(student,recipe_file,guac_config,weights,to_execute,verbose=args.verbose)
        
# --recipe
def generate(args):
    recipe_file=args.recipe
    
    run_config=RunConfig(GuacConfig(),recipe_file)
    master=run_config.guac_config.master
    
    print(f"Generating master results from: {master}")
    weights_file,to_execute=parse_recipe_yaml(recipe_file)
    weights=read_yaml_file(weights_file)
    
    master_dir=get_master_dir(run_config.guac_config.home,recipe_file)
    shutil.rmtree(master_dir,ignore_errors=True)
    os.makedirs(master_dir)
  
    # maybe write context file to results e.g.
    # os.uname().nodename >> master_dir/host_name, then we can error if run is on different machine than generate
    
     # generate should pass all tests so we always want to know if it fails
    score,total = run_tasks(recipe_file,weights,to_execute,run_config,verbose=2)
    if score!=total:
        raise Exception(f"Error: generate failed {total-score} tests")

# --recipe
def list_tests(args):
    print("Listing Tests")
    recipe_file=args.recipe
    run_config=RunConfig(GuacConfig(),recipe_file,is_listing="True")
    weights_file,to_execute=parse_recipe_yaml(recipe_file)
    list_tests_internal(to_execute,run_config)
     
# --force
def init(args):
    print("Initializing 'guac.yaml'")
    force=args.force
    cwd=os.getcwd()
    if os.path.isfile("guac.yaml"):
        print("File 'guac.yaml' already exists")
        confirm("replace 'guac.yaml'",force)
        
    user_home=os.environ['HOME']
    config_vars={"ASSIGNMENT":os.path.basename(cwd),
                 "GUAC_HOME":os.path.join(user_home,"guac"),
                 "AVOCADO_HOME":os.path.join(user_home,"avocado"),
                 "SUBMISSION_HOME":os.path.join(user_home,"Checkin"),
                 "MASTER":"None"}
    config_vals=config_vars.copy()
    
    for var,default in config_vars.items():
        resp=input(f"Enter value for {var} default is {default}: ")
        if resp!='':
            config_vals[var]=resp

    guac_config=f"HOME: {cwd}\n"
    for var,val in config_vals.items():
        guac_config+=f"{var}: {val}\n"
        
    write_output('guac.yaml',guac_config)

    confirm("to add template files",force)
    
    dirs=["data","lib","recipes","bin"]
    for d in dirs:
        os.makedirs(d,exist_ok=True)
     
    guac_conf=GuacConfig()
    guac_templ=os.path.join(guac_conf.guac_home,"templates")
    shutil.copyfile(os.path.join(guac_templ,"templ_collect.yaml"),"data/templ_collect.yaml")
    shutil.copyfile(os.path.join(guac_templ,"templ_compare.yaml"),"data/templ_compare.yaml")
    shutil.copyfile(os.path.join(guac_templ,"templ_collect.yaml"),"recipes/templ_recipe.yaml")
        
# --name
# --recipe
# --verbose {0,1,2}
def grade(args):
    name=args.name
    recipe_file=args.recipe
    verbose=int(args.verbose)
    _grade(name,recipe_file,verbose)
    
def _grade(name,recipe_file,verbose):
    score_file=get_score_file(recipe_file,name)

    # string , string, dict , score
    score_data,summery,_,score=parse_score_file(score_file)
    
    if verbose==0:
        print(f"{name} Score: {score}")
    if verbose==1:
        print(summery)
    if verbose==2:
        print(score_data)
        
    return score

# --name
# --file
def inspect(args):
    name=args.name
    file_name=args.file

    
    guac_config=GuacConfig()
    tar_loc=tar_location(guac_config.sub_home,guac_config.assignment,name)

    if file_name is None:
        print(list_tar_contents(tar_loc))
    else:
        print(read_file_from_tar(tar_loc,file_name))

# --file
# --these
# [--dest]
# --force
def extract(args):
    file_name=args.file
    force=args.force
    guac_config=GuacConfig()
    dest = args.dest if args.dest else os.path.join(guac_config.home,"bin")
    these = parse_students_yaml(args.these)
    
    file_split=os.path.basename(file_name).split('.')
    file_stripped=file_split[0]
    file_type=file_split[1] if len(file_split)>1 else ''
    dest_joined=os.path.join(dest,file_stripped)
    dest_joined_green=color(Fore.GREEN,dest_joined)
    if os.path.isdir(dest_joined):
        print(f"Directory {dest_joined_green} already exists")
        confirm(f"replace {dest_joined_green}",force)
        shutil.rmtree(dest_joined)
    os.mkdir(dest_joined)
    print(f"Collecting in {dest_joined_green}")

    for stdID in these:
        tar_loc=tar_location(guac_config.sub_home,guac_config.assignment,stdID)
        try:
            file_data=read_file_from_tar(tar_loc,file_name)
        except Exception as e:
            print(str(e))
        new_name=f"{stdID}.{file_type}" if file_type!='' else stdID
        file_dest=os.path.join(dest_joined,new_name)
        write_output(file_dest,file_data)
        
# --name
# --recipe
# --task
# --score
# --force
def update(args):
    name=args.name
    recipe_file=args.recipe
    task=args.task
    score=args.score
    force=args.force

    guac_config=GuacConfig()
    
    score_file=get_score_file(recipe_file,name)
    
    # string , string, dict , score
    score_data,summery_str,summery_dict,final_score=parse_score_file(score_file)

    task_results=safe_get_var(summery_dict,"Task_Results")

    try:
        old_score_str=safe_get_var(task_results,task)
    except Exception as e:
        raise ValueError(f"Summery does not contain task {task}")
        #confim("add {task} to student's grade")
        #total=int(input("input task total: "))
        #old_score=Score(0,total)

    old_score=Score.fromString(old_score_str)
    score_diff=score-old_score.score
    new_score=Score(score,old_score.total)
    new_final_score=Score(final_score.score+score_diff,final_score.total)

    task_results[task]=str(new_score)

    new_summery=summerize_task_results(guac_config.assignment,task_results,new_final_score)

    print(f"New summery:\n---\n{new_summery}---")

    confirm("update summery",force)
    score_data_rest=score_data.split('---')[:1]
    all_results='---'.join([new_summery]+score_data_rest)

    write_output(score_file,all_results)
    
# --recipe
# --these
def export(args):
    these=parse_students_yaml(args.these)
    recipe=args.recipe

    std_scores=[(stdID,_grade(stdID,recipe,-1).score) for stdID in these]

    for stdID,score in std_scores:
        print(f"{stdID},{score}")

# --recipe
def server(args):
    recipe=args.recipe
    guac_config=GuacConfig()

    server=Server(recipe,guac_config)

    server.serve()

    
    
def main():
    #shutil.rmtree("/tmp/guac",ignore_errors=True)

    # if server is running in current directory, guac will not run
    guac_config=GuacConfig()

    server_file=get_server_file(guac_config.home)
    if os.path.isfile(server_file):
        contents=safe_read(server_file)
        print("Error: server is running")
        print(contents)
        print(f"If you are sure the server is not running, remove {server_file}")
        exit(1)
    
    parser,args = parse_arguments()

    if hasattr(args,"func"):
        args.func(args)
    else:
        parser.print_help()
    
if __name__ == '__main__':
    main()
