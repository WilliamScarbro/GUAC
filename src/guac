#!/bin/python3.8

#
import argparse
import yaml
import subprocess
import os
import shutil
import json
from colorama import Fore,Style

from ParseYaml import *
from Util import *
from Logger import Logger

from GuacConfig import *        
from GuacInternal import *
from GuacServer import *

###
# Executable interface

def parse_arguments():
    def add_recipe(_parser,required=True):
        _parser.add_argument("--recipe",metavar="recipe_file",required=required,help="recipe file specifies which tests to run")

    def add_name(_parser,required=True):
        _parser.add_argument("--name",metavar="name",required=required,help="name of student (stdID)")

    def add_file(_parser,required=True):
        _parser.add_argument("--file",required=required,help="file name")

    def add_these(_parser,required=True):
        _parser.add_argument("--these",metavar="students_file",required=required,help="file containing list of students")

    def add_verbose(_parser):
        _parser.add_argument("-v", "--verbose", choices=[0, 1, 2], type=int, default=0, help="Verbosity level (0, 1, or 2)")

    def add_force(_parser):
        _parser.add_argument("-f", "--force",action="store_true",help="force confirm all actions")
        
    parser = argparse.ArgumentParser(description='Grading wrapper for Avocado Framework.')
    subparsers = parser.add_subparsers(dest="command", help="Available commands")

    # run
    run_parser=subparsers.add_parser("run",help="run grading scripts using recipe")
    run_parser.set_defaults(func=run)
    run_parser.set_defaults(parser=run_parser)
    run_group=run_parser.add_mutually_exclusive_group(required=True)
    add_name(run_group,required=False)
    add_these(run_group,required=False)
    add_recipe(run_parser)
    add_verbose(run_parser)
    
    # list
    list_parser=subparsers.add_parser("list",help="list tests executed by recipe")
    list_parser.set_defaults(func=list_tests)
    add_recipe(list_parser,required=True)
    
    # generate
    generate_parser=subparsers.add_parser("generate",help="generate results for recipe using master")
    generate_parser.set_defaults(func=generate)
    add_recipe(generate_parser)
    
    # init
    init_parser=subparsers.add_parser("init",help="initializes new assignment directory, e.g. writes guac.yaml")
    init_parser.set_defaults(func=init)
    add_force(init_parser)

    # grade
    grade_parser=subparsers.add_parser("grade",help="extracts grades from results of run")
    grade_parser.set_defaults(func=grade)
    add_name(grade_parser)
    add_recipe(grade_parser)
    add_verbose(grade_parser)
    
    # summerize
    summerize_parser=subparsers.add_parser("summerize",help="summerizes grade resutls over these")
    summerize_parser.set_defaults(func=summerize)
    add_these(summerize_parser)
    add_recipe(summerize_parser)
    #add_verbose(summerize_parser)

    # inspect
    inspect_parser=subparsers.add_parser("inspect",help="inspects file from student's submission")
    inspect_parser.set_defaults(func=inspect)
    add_name(inspect_parser)
    add_file(inspect_parser,required=False)
    
    # extract
    extract_parser=subparsers.add_parser("extract",help="extracts file from these students and collects in dest directory (default ./bin)")
    extract_parser.set_defaults(func=extract)
    add_file(extract_parser)
    add_these(extract_parser)
    add_force(extract_parser)
    extract_parser.add_argument("--dest",metavar="destination_dir",required=False,help="name of directory to extract files")
    
    # update
    update_parser=subparsers.add_parser("update",help="updates student's grade, either score or status")
    update_subparser=update_parser.add_subparsers()

    # update score
    update_score_parser=update_subparser.add_parser("score",help="updates scores")
    update_score_parser.set_defaults(func=update_score)
    add_name(update_score_parser)
    add_recipe(update_score_parser)
    add_force(update_score_parser)
    update_score_parser.add_argument("--task",metavar="task_name",required=True,help="task name")
    update_score_parser.add_argument("--score",metavar="score",type=int,required=True,help="new score")
    
    # update status
    update_status_parser=update_subparser.add_parser("status",help="updates student's submission status")
    update_status_parser.set_defaults(func=update_status)
    add_name(update_status_parser)
    add_recipe(update_status_parser)
    add_force(update_status_parser)
    update_status_parser.add_argument("--status",metavar="status",required=True,help="new status")

    # export
    export_parser=subparsers.add_parser("export",help="exports grades in CSV format")
    export_parser.set_defaults(func=export)
    add_recipe(export_parser)
    add_these(export_parser,required=True)
    add_force(export_parser)
    export_parser.add_argument("--target",metavar="target_name",required=True,help="Canvas: output grades as CSV, Checkin: copy to grade dir")
    export_parser.add_argument("--late_penalty",metavar="late_penalty",type=int,required=False,help="applies penalty to students who submitted late, default 0 (Canvas only)")
    
    
    # clear
    clear_parser=subparsers.add_parser("clear",help="clears all saved data")
    clear_parser.set_defaults(func=clear)
    
    # server
    server_parser=subparsers.add_parser("server",help="launches test server")
    server_parser.set_defaults(func=server)
    add_recipe(server_parser)
    
    return parser,parser.parse_args()

# --name | --these
# --recipe
# --verbose {0,1,2}
def run(args):
    check_for_server()

    recipe_file=args.recipe
    guac_config=GuacConfig()
    weights_file,to_execute=parse_recipe_yaml(recipe_file)
    weights=read_yaml_file(weights_file)
    
    to_run=[]
    if args.name:
        print(f"Name: {args.name}")
        to_run=[args.name]
         
    if args.these:
        print(f"YAML file: {args.these}")
        to_run=parse_students_yaml(args.these)
     
    # check users
    _ = [check_user_exists(name) for name in to_run]

    #print(f"grading: {to_run}")
    for student in to_run:
        grade_result = run_student(student,recipe_file,guac_config,weights,to_execute,verbose=args.verbose)
        print(grade_result.dump(verbose=args.verbose))
        print('---')
        
# --recipe
def generate(args):
    check_for_server()
    recipe_file=args.recipe
    
    run_config=RunConfig(GuacConfig(),recipe_file)
    master=run_config.guac_config.master
    
    print(f"Generating master results from: {master}")
    weights_file,to_execute=parse_recipe_yaml(recipe_file)
    weights=read_yaml_file(weights_file)
    
    master_dir=get_master_dir(run_config.guac_config.home,recipe_file)
    shutil.rmtree(master_dir,ignore_errors=True)
    os.makedirs(master_dir)
  
    # maybe write context file to results e.g.
    # os.uname().nodename >> master_dir/host_name, then we can error if run is on different machine than generate
    
     # generate should pass all tests so we always want to know if it fails
    grade_results = run_tasks(recipe_file,weights,to_execute,run_config,verbose=2)
    grade=Score.fromString(grade_results.grade)
    print(grade_results.dump(verbose=2))
    if grade.score!=grade.total:
        print(color(Fore.RED,f"Error: generate failed {grade.total-grade.score} tests"))

# --recipe
def list_tests(args):
    print("Listing Tests")
    recipe_file=args.recipe
    run_config=RunConfig(GuacConfig(),recipe_file,is_listing="True")
    weights_file,to_execute=parse_recipe_yaml(recipe_file)
    list_tests_internal(to_execute,run_config)
     
# --force
def init(args):
    print("Initializing 'guac.yaml'")
    force=args.force
    cwd=os.getcwd()
    if os.path.isfile("guac.yaml"):
        print("File 'guac.yaml' already exists")
        confirm("replace 'guac.yaml'",force)
        
    user_home=os.environ['HOME']
    config_vars={"ASSIGNMENT":os.path.basename(cwd),
                 "GUAC_HOME":os.path.join(user_home,"guac"),
                 "AVOCADO_HOME":os.path.join(user_home,"avocado"),
                 "SUBMISSION_HOME":os.path.join(user_home,"Checkin"),
                 "MASTER":"None"}
    config_vals=config_vars.copy()
    
    for var,default in config_vars.items():
        resp=input(f"Enter value for {var} default is {default}: ")
        if resp!='':
            config_vals[var]=resp

    guac_config=f"HOME: {cwd}\n"
    for var,val in config_vals.items():
        guac_config+=f"{var}: {val}\n"
        
    write_output('guac.yaml',guac_config)

    confirm("to add template files",force)
    
    dirs=["data","lib","recipes","bin"]
    for d in dirs:
        os.makedirs(d,exist_ok=True)
     
    guac_conf=GuacConfig()
    guac_templ=os.path.join(guac_conf.guac_home,"templates")
    shutil.copyfile(os.path.join(guac_templ,"templ_collect.yaml"),"data/templ_collect.yaml")
    shutil.copyfile(os.path.join(guac_templ,"templ_compare.yaml"),"data/templ_compare.yaml")
    shutil.copyfile(os.path.join(guac_templ,"templ_collect.yaml"),"recipes/templ_recipe.yaml")
        
# --name
# --recipe
# --verbose {0,1,2}
def grade(args):
    check_for_server()
    
    name=check_user_exists(args.name)
    recipe_file=args.recipe
    verbose=int(args.verbose)
    grade_result=_grade(GuacConfig().home,name,recipe_file)
    print(grade_result.dump(verbose=verbose))
    
def _grade(home,name,recipe_file):

    # possible exception
    score_file=get_score_file(home,recipe_file,name)
    
    grade_result=GradeResults.from_data(read_yaml_file(score_file))
    
    return grade_result

def summerize(args):
    check_for_server()

    recipe_file=args.recipe
    #verbose=int(args.verbose)
    these = [check_student_exists(name) for name in parse_students_yaml(args.these)]

    grade_results=[]
    for stdID in these:
        # does not catch error when student does not exist
        # (all students should have been graded on recipe)
        grade_results.append(_grade(GuacConfig().home,stdID,recipe_file))

    grade_dist = [Score.fromString(gr.grade).score for gr in grade_results]

    grade_set = sorted(list(set(grade_dist)))

    grade_hist = { grade : sum([1 if gd==grade else 0 for gd in grade_dist]) for grade in grade_set }

    average = sum(grade_dist) / len(grade_dist)
    
    for grade in grade_hist:
        print(f"{grade} | {grade_hist[grade]}")

    print(f"Average {average}")

    
# --name
# --file
def inspect(args):
    check_for_server()
    
    name=check_user_exists(args.name)
    file_name=args.file

    
    guac_config=GuacConfig()
    tar_loc=tar_location(guac_config.sub_home,guac_config.assignment,name)

    if file_name is None:
        print(list_tar_contents(tar_loc))
    else:
        print(read_file_from_tar(tar_loc,file_name))

# --file
# --these
# [--dest]
# --force
def extract(args):
    check_for_server()

    file_name=args.file
    force=args.force
    guac_config=GuacConfig()
    dest = args.dest if args.dest else os.path.join(guac_config.home,"bin")
    these = [check_student_exists(name) for name in parse_students_yaml(args.these)]
    
    file_split=os.path.basename(file_name).split('.')
    file_stripped=file_split[0]
    file_type=file_split[1] if len(file_split)>1 else ''
    dest_joined=os.path.join(dest,file_stripped)
    dest_joined_green=color(Fore.GREEN,dest_joined)
    if os.path.isdir(dest_joined):
        print(f"Directory {dest_joined_green} already exists")
        confirm(f"replace {dest_joined_green}",force)
        shutil.rmtree(dest_joined)
    os.mkdir(dest_joined)
    print(f"Collecting in {dest_joined_green}")

    for stdID in these:
        try:
            tar_loc=tar_location(guac_config.sub_home,guac_config.assignment,stdID)
            file_data=read_file_from_tar(tar_loc,file_name)
        except Exception as e:
            print(str(e))
            continue
        new_name=f"{stdID}.{file_type}" if file_type!='' else stdID
        file_dest=os.path.join(dest_joined,new_name)
        write_output(file_dest,file_data)
        
# --name
# --recipe
# --task
# --score
# --force
def update_score(args):
    check_for_server()
    
    name=check_user_exists(args.name)
    recipe_file=args.recipe
    task=args.task.replace(' ','_')
    score=args.score
    force=args.force

    guac_config=GuacConfig()

    # error if missing score file
    score_file=get_score_file(guac_config.home,recipe_file,name)


    grade_result=GradeResults.from_data(read_yaml_file(score_file))

    try:
        old_score_str=safe_get_var(grade_result.task_scores,task)
        old_score=Score.fromString(old_score_str)
    except Exception as e:
        print(f"Task Scores do not contain task '{task}'")
        confirm(f"add '{task}' to student's grade",force)
        total=int(input("input '{task}' total: "))
        old_score=Score(0,total)

    score_diff=score-old_score.score
    new_score=Score(score,old_score.total)
    #new_final_score=Score(final_score.score+score_diff,final_score.total)

    # udpate task score
    grade_result.task_scores[task]=str(new_score)

    # update grade
    grade_result.grade=GradeResults.get_grade(grade_result.task_scores)

    new_summery = grade_result.dump(verbose=1)
    
    print(f"New summery:\n---\n{new_summery}---")

    confirm("update score",force)

    write_output(score_file,grade_result.dump(verbose=2))

    # add message
    confirm("add message",force)

    default_message=f"Manually graded task '{task}' with score '{score}'"
    message=None
    if not force:
        message=input(f"Update message, default ({default_message}):")
    if message==None or message=='':
        message=default_message

    grade_result.add_message(message)

    write_output(score_file,grade_result.dump(verbose=2))

# --recipe
# --name 
# --status
# --force
def update_status(args):
    check_for_server()

    recipe_file=args.recipe
    name=check_user_exists(args.name)
    status=args.status
    force=args.force

    guac_config=GuacConfig()

    # error if missing score file
    score_file=get_score_file(guac_config.home,recipe_file,name)

    grade_result=GradeResults.from_data(read_yaml_file(score_file))

    # error if not legal status
    grade_result.update_status(status)

    confirm("update status",force)

    write_output(score_file,grade_result.dump(verbose=2))

# --recipe
# --these
# --target
# --force
# --late_penalty
def export(args):
    check_for_server()
    
    these=[check_student_exists(name) for name in parse_students_yaml(args.these)]
    recipe=args.recipe
    target=args.target
    force=args.force
    guac_config=GuacConfig()
    home=guac_config.home
    
    if target=="Canvas":

        late_penalty = 0 if args.late_penalty is None else args.late_penalty
            
        std_scores=[]
        for student in these:
            try:
                grade_result=_grade(home,student,recipe)
                score=Score.fromString(grade_result.grade).score
                #print(student,grade_result.sub_status)
                if grade_result.sub_status == "BeforeTime":
                    score = score+int(os.environ["PREBONUS"]) if score != 0 else score

                if grade_result.sub_status == "Late":
                    score=max(score-late_penalty,0)

                if grade_result.sub_status == "Missing": # in case the grade weights allow "free" points
                    score=0
                std_scores.append((student,score))
            except Exception as e:
                print(e)
                
        for student,score in std_scores:
            print(f"{student},{score}")
        return

    if target=="Checkin":
        guac_config=GuacConfig()
        checkin_grade_dir=os.path.join(guac_config.sub_home,f"{guac_config.assignment}/{guac_config.assignment}.grades")

        confirm(f"copy grade results to {checkin_grade_dir}",force)

        os.makedirs(checkin_grade_dir,exist_ok=True)
        for student in these:
            try:
                score_file=get_score_file(guac_config.home,recipe,student)
                shutil.copy(score_file,os.path.join(checkin_grade_dir,os.path.basename(score_file)))
            except Exception as e:
                print(e)
        return

    print(f"Unknown target '{target}'")
    exit(1)

def clear(args):
    check_for_server()
    dirs=[".master_results",".scores",".work",".config"]
    confirm(f"clear all data in directories: {', '.join(dirs)}",False)

    guac_config=GuacConfig()
    for direc in dirs:
        path=os.path.join(guac_config.home,direc)
        print(f"clearing {path}")
        shutil.rmtree(path)
        
# --recipe
def server(args):
    check_for_server()
    recipe=args.recipe
    guac_config=GuacConfig()

    server=Server(recipe,guac_config)

    server.serve()

def check_for_server():
    # if server is running in current directory, guac will not run
    guac_config=GuacConfig()

    server_file=get_server_file(guac_config.home)
    if os.path.isfile(server_file):
        contents=safe_read(server_file)
        print("Error: server is running")
        print(contents)
        print(f"If you are sure the server is not running, remove {server_file}")
        exit(1)
     
    
def main():
    #shutil.rmtree("/tmp/guac",ignore_errors=True)

   
    parser,args = parse_arguments()

    if hasattr(args,"func"):
        args.func(args)
    else:
        parser.print_help()
    
if __name__ == '__main__':
    main()
